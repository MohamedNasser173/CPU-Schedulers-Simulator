package schedulers;

import java.util.*;

public class roundRobin {
    int Quantum;
    int NumOfProcesses,context_Switching;
  
    ArrayList<Process> processesList = new ArrayList<Process>(); ///Info table of the processes
    ArrayList<Process> excudeOrder = new ArrayList<Process>(); ///execution queue, (simulating Gantt chart)
    Queue<Process>RRqueue = new LinkedList<Process>();
    Queue<Process>tempRRqueue = new LinkedList<Process>();
    ArrayList<Process> arr = new ArrayList<Process>(); //for cheaking
     
    double averageWaitingTime =0.0;
    double averageTurnAroundTime=0.0;
    int timer=0;


    public static class sortByArrivalTime implements Comparator<Process> {

        @Override
        public int compare(Process o1, Process o2) {  ///If arrival times are equal, favor queue 1 process
            if(o1.arrivalTime - o2.arrivalTime == 0){
                return o1.queueNumber - o2.queueNumber;
            }
            return o1.arrivalTime - o2.arrivalTime;

        }
    }


    void GetData(){  //Take processes, arranges them in queue according to their arrival time.
        Scanner input = new Scanner(System.in);
        System.out.println("Enter number of processes");
        NumOfProcesses = input.nextInt();
        
        System.out.println("Enter the process name || Burst time || arrival time || Queue Number"); 
        for (int i = 0; i < NumOfProcesses; i++) {
            String processName = input.next();
            Process p = new Process();
            p.name = processName;
            
            p.CopyBurstTime = input.nextInt();
            p.burstTime=p.CopyBurstTime;
            Integer n = input.nextInt();
           
        }
        
        System.out.println("Enter Time Quantum");
        Quantum = input.nextInt();
        
        
        System.out.println("Enter the context Switching");
        context_Switching = input.nextInt();
        
        
        Collections.sort(processesList, new roundRobin.sortByArrivalTime());

    }
    void run_multiLevel(){
    	GetData();
        executeProcess();
        print_output();

    }
    
    boolean findInQueue(Process p,ArrayList<Process> arr)
    {
    	for (int i=0;i<arr.size();i++)
    	{
    		if (arr.get(i).equals(p))
    			return false;
    	}
    	
    	return true;
    }


    void executeProcess(){

        while( NumOfProcesses >0 ) {
          

            for (int i = 0; i < processesList.size(); i++) { ///if process arrived, add it to its queue
                    Process p = processesList.get(i);System.out.println(p.name+"0000");
                    if(p.arrivalTime<=timer)){
                       
                            RRqueue.add(p);
                            arr.add(p);
                            
                        
                    }
               }
            
            if(RRqueue.size()>0) {
                ///fetch process
                Process p = RRqueue.peek();RRqueue.poll();
                System.out.println(p.name);
                if(excudeOrder.size()==0 || excudeOrder.get(excudeOrder.size()-1)!=p){ //check if the same process is being executed
                	excudeOrder.add(p);
                }
                
                if (p.CopyBurstTime>Quantum)
                {
                	p.CopyBurstTime-=Quantum;
                	tempRRqueue.add(p);
                	timer+=context_Switching+Quantum;
                }
                else 
                {
                	timer+=p.CopyBurstTime;
                	p.CopyBurstTime=0;
                	
                	 p.turnAroundTime=(timer) - p.arrivalTime;
                     p.waitingTime=p.turnAroundTime - p.burstTime;
                     timer+=context_Switching;
                     processesList.set(processesList.indexOf(p),p) ;
                     
                     NumOfProcesses--;
                }
                  

            }
            
            if (RRqueue.size()==0&&tempRRqueue.size()>0)
            {
            	for (int index=0;index<tempRRqueue.size();index++)
            	{
            		RRqueue.add(tempRRqueue.peek());
            		tempRRqueue.poll();
            		
            	}
            }
            else 
            	timer++;


        }
    }

    void print_output(){
        for (int i = 0; i < excudeOrder.size(); i++) {
            System.out.print(excudeOrder.get(i).name + "  ");
        }
        System.out.println();

        System.out.println("Process Name    Turnaround Time   Waiting Time ");
        for (int i = 0; i < processesList.size(); i++) {
            Process p = processesList.get(i);
            averageTurnAroundTime+=p.turnAroundTime;
            averageWaitingTime+=p.waitingTime;
            System.out.println(" "+p.name+"     \t    "+p.turnAroundTime+"    \t     "+p.waitingTime);
        }

        averageTurnAroundTime/=  processesList.size();
        averageWaitingTime /= processesList.size();

        System.out.println("Average Turnaround Time = " + averageTurnAroundTime);
        System.out.println("Average WaitingTime = " + averageWaitingTime);
    }
}

/*
p1 4 0 1
p2 3 0 1
p3 8 0 2
p4 5 10 1
*/
/*
p1 4 0 
p2 3 0 
p3 8 0 
p4 5 10 
*/
